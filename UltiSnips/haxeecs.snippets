snippet classMessage
package ${1:world.messages};

class ${2:`!p snip.rv = snip.basename`} extends zf.Message {
	public static final MessageType = "$2";

	public function new() {
		super(MessageType);
	}
}
endsnippet

snippet classSystem
package ${1:world.systems};

class ${2:`!p snip.rv = snip.basename`} extends zf.ecs.System {

	var world: World;
	public function new() {
		super();
	}

	override public function init(world: zf.ecs.World) {
		this.world = cast(world, World);
		var dispatcher = this.world.dispatcher;
	}
}
endsnippet

snippet classComponent
package ${1:world.components};

class ${2:`!p snip.rv = snip.basename`} extends zf.ecs.Component {
	public static final ComponentType = "$2";
	override public function get_type(): String {
		return ComponentType;
	}

	public static function get(e: ${3:zf.ecs.DynamicEntity}): $2 {
		var c = e.getComponent(ComponentType);
		return c == null ? null : cast(c, $2);
	}

	public static function exists(e: $3): Bool {
		return e.getComponent(ComponentType) != null;
	}

	override public function toString(): String {
		return '{c:$2}';
	}
}

endsnippet

snippet classInlineComponent
class ${1:Component} extends zf.ecs.Component {
	public static final Type = "$1";
	override public function get_type(): String {
		return Type;
	}
}
endsnippet

snippet mListen
// @:listen `!p snip.rv = snip.basename` $1 $3
${2:dispatcher}.listen(${1:Message}.MessageType, function(message: zf.Message) {
	var m = cast(message, $1);
}, ${3:0});
endsnippet

snippet varComponent
public var ${1:varName}(default, set): ${2:Component};
public function set_$1(c: $2): $2 {
	if (this.$1 == c) return this.$1;
	if (this.$1 != null && this.world != null) {
		this.world.dispatcher.dispatch(new zf.ecs.messages.ComponentRemoved(this, this.$1));
	}
	this.$1 = c;
	if (this.$1 != null && this.world != null) {
		this.world.dispatcher.dispatch(new zf.ecs.messages.ComponentAttached(this, this.$1));
	}
	return this.$1;
}
endsnippet

snippet listenComponentChange
function setupComponentChangeListeners() {
	this.world.dispatcher.listen(ComponentAttached.ComponentType, function(message: zf.Message) {
		var m = cast(message, ComponentAttached);
		if (m.component.type == ${1:Component}.ComponentType) {
			this.registerEntity(cast(m.entity, Entity));
		}
	}, 100);
	this.world.dispatcher.listen(ComponentRemoved.ComponentType, function(message: zf.Message) {
		var m = cast(message, ComponentRemoved);
		if (m.component.type == $1.ComponentType) {
			this.unregisterEntity(cast(m.entity, Entity));
		}
	}, 100);
}
function registerEntity(entity: Entity) {
}
function unregisterEntity(entity: Entity) {
}
endsnippet

snippet getComponent
public static function get(e: ${2:zf.ecs.DynamicEntity}): ${1:`!p snip.rv = snip.basename`} {
	var c = e.getComponent(ComponentType);
	return c == null ? null : cast(c, $1);
}
public static function exists(e: $2): Bool {
	return e.getComponent(ComponentType) != null;
}
endsnippet


snippet comment
/**
	${0}
**/
endsnippet

snippet set
public function set_${1:var}($1: ${2: T}): $2 {
	this.$1 = $1;
	return this.$1;
}
endsnippet

snippet get
public function get_${1:var}(): ${2: T} {
	return this.$1;
}
endsnippet

snippet variable
public var ${1: var}(get, set): ${2: T};

public function set_$1($1: $2): $2 {
	this.$1 = $1;
	return this.$1;
}
public function get_$1(): $2 {
	return this.$1;
}
endsnippet

snippet castComponent
cast(${2:entity}.getComponent(${1:Component}.TYPE), $1);
endsnippet

snippet classComponent
package ${1:world.components};
import common.ecs.Component;

class ${2:`!p snip.rv = snip.basename`} extends Component {
	public static final TYPE = "$2";
	override public function get_type(): String { return TYPE; }
}
endsnippet

snippet classMessage
package ${1:world.messages};

class ${2:`!p snip.rv = snip.basename`} extends common.Message {
	public static final TYPE = "$2";

	override public function get_type(): String {
		return TYPE;
	}

	public function new() {
		super();
	}
}
endsnippet

snippet classSystem
package ${1:world.systems};

class ${2:`!p snip.rv = snip.basename`} extends common.ecs.System<${3:Entity}> {

	public function new() {
		super();
	}
}
endsnippet

snippet mListen
${1:mailbox}.listen(${2:Message}.TYPE, function(message: common.Message) {
	var m = cast(message, $2);
});
endsnippet

snippet classCard
package world.cards;

import world.Party;
import world.Battle;
import world.Entity;

class ${1:`!p snip.rv = snip.basename`} extends Card {
	public inline static final Id: CardId = ${2:`!p snip.rv = snip.basename`V1};

	public function new() {
		super("${3:`!p snip.rv = snip.basename`}");
		this.targetArea = Self;
		this.targetParty = Ally;
		this.description = '';
	}

	override public function play(battle: Battle, entity: Entity,
		selection: {partySide: PartySide, pos: Int}, onFinish: CardLocation->Void) {
		if (!canPlay(entity, selection)) return;
		onFinish(Discard);
	}

	override public function getSmallCard(?entity: Entity): h2d.Layers {
		var l = super.getSmallCard(entity);
		var font = Globals.gamerFont.toFont().clone();
		font.resizeTo(18);
		l.addChild(common.h2d.Factory.text(new h2d.Text(font))
			.textColor(0x4FA4B8)
			.setText('additional text')
			.centerHorizontal(Constants.SmallCardSize.x / 2)
			.position(null, 35)
			.text);
		return l;
	}

	override public function getUpgradedCard(): Card {
		return new $1();
	}

	public static function makePrefab(t: String): Card {
		switch (t) {
			case "starter":
				return new $1();
			default:
				return new $1();
		}
	}

	public static function make(tier: Tier, r: hxd.Rand): Card {
		return new $1();
	}
}
endsnippet

snippet debuglog
inline function log(message: String) {
#if (debuglog > ${2:1})
	trace('${1:[Melee Log]} ${message}');
#end
}
endsnippet

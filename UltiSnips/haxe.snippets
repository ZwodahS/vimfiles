snippet comment
/**
	${0}
**/
endsnippet

snippet set
public function set_${1:var}($1: ${2: T}): $2 {
	this.$1 = $1;
	return this.$1;
}
endsnippet

snippet get
public function get_${1:var}(): ${2: T} {
	return this.$1;
}
endsnippet

snippet variable
public var ${1: var}(get, set): ${2: T};

public function set_$1($1: $2): $2 {
	this.$1 = $1;
	return this.$1;
}
public function get_$1(): $2 {
	return this.$1;
}
endsnippet

snippet debuglog
inline function log(message: String) {
#if (debuglog > ${2:1})
	trace('${1:[Melee Log]} ${message}');
#end
}
endsnippet

snippet nolint
// @formatter:off
endsnippet

snippet assertTODO
Assert.unreachable('TODO');
endsnippet

snippet db
Debug.b();
endsnippet

snippet enum
enum $1Enum {
}

abstract ${1:`!p snip.rv = snip.basename`}($1Enum) from $1Enum to $1Enum {
	public function new(type: $1Enum) {
		this = type;
	}

	public var name(get, never): String;

	public function get_name(): String {
		switch(this) {
			default:
				return "";
		}
	}
}
endsnippet

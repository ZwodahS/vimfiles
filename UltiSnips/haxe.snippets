snippet comment
/**
	${0}
**/
endsnippet

snippet set
public function set_${1:var}($1: ${2: T}): $2 {
	this.$1 = $1;
	return this.$1;
}
endsnippet

snippet get
public function get_${1:var}(): $2 {
	return this.$1;
}
endsnippet

snippet variable
public var ${1: var}(get, set): ${2: T};

public function set_$1($1: $2): $2 {
	this.$1 = $1;
	return this.$1;
}
public function get_$1(): $2 {
	return this.$1;
}
endsnippet

snippet castComponent
cast(${2:entity}.getComponent(${1:Component}.TYPE), $1);
endsnippet

snippet classComponent
package ${1:world.components};
import common.ecs.Component;

class ${2:`!p snip.rv = snip.basename`} extends Component {
	public static final TYPE = "$2";
	override public function get_type(): String { return TYPE; }
}
endsnippet

snippet classMessage
package ${1:world.messages};

import common.Message;

class ${2:`!p snip.rv = snip.basename`} extends Message {
	public static final TYPE = "$2";
	override public function get_type(): String { return TYPE; }

	public function new() {
		super();
	}
}
endsnippet

snippet classSystem
package ${1:world.systems};

import common.ecs.System;
import common.ecs.Entity;

class ${2:`!p snip.rv = snip.basename`} extends System {
	public function new() {
		super();
	}
	override public function addEntity(entity: Entity) {}
	override public function removeEntity(entity: Entity): Entity {
		return entity;
	}
}
endsnippet

snippet mListen
${1:mailbox}.listen(${2:Message}.TYPE, function(m: Message) {
	var message = cast(m, $2);
})
endsnippet
